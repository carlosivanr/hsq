---
title: "NJH Data EDA"
format:
  html:
    embed-resources: true
    toc: true

execute: 
  echo: false
---

```{python}
import pandas as pd
from great_tables import GT, md, html
from pyprojroot import here
```

```{python}
# Define a function that generates frequency and proportions of one column
def freq_prop(df, col_name):
    
    """ Returns a GT object with the n(%) values sorted descending.
    Keyword arguments:
    df       -- a dataframe
    col_name -- the name of the column in quotes
    freq_prop(df, "Gender")
    """
    # Get the total sample size from the column
    N = str(df.shape[0])

    # If the input column type is categorical, then do not sort the value
    if isinstance(df[col_name].dtype, pd.CategoricalDtype):
        out = GT(pd.DataFrame(
            (df[col_name].fillna("Missing", inplace = False).value_counts(sort = False).astype(str)) +
            ' (' +
            (df[col_name].fillna("Missing", inplace = False).value_counts(normalize = True, sort = False).mul(100).round(1).astype(str) + '%)'))
            .reset_index()
            .rename(columns = {0:("N = " + N)})
            )
    else:
    # Else display with default behavior which is to sort
        out = GT(pd.DataFrame(
            (df[col_name].fillna("Missing", inplace = False).value_counts().astype(str)) +
            ' (' +
            (df[col_name].fillna("Missing", inplace = False).value_counts(normalize = True).mul(100).round(1).astype(str) + '%)'))
            .reset_index()
            .rename(columns = {0:("N = " + N)})
            )
    
    return(out)

```

```{python}
def summarize(data, column):
    """
    Generate a table with the mean and standard deviation of a continuous variable.

    Parameters:
    - data (pd.DataFrame): The dataset
    - column (str): The name of the continuous variable

    Returns:
    - GT object displaying the mean and standard deviation
    """
    N = data[column].notna().sum().astype(str)

    summary = (GT(pd.DataFrame({
    "Characteristic": [column],
    "Value": [f"{data[column].mean():.2f} ({data[column].std():.2f})"]
    }).rename(columns = {"Value":("N = " + N )}))
    .tab_source_note(source_note=html("<sup>1</sup> Mean (SD)")))

    return summary
```

```{python}
# Load the most recent data file
data = pd.read_csv(here("scripts/njh_data/njh_data.csv"), header = 0)
```

```{python}
# Remove the OH participants from the most recent file so that the final OH 
# participants can be appended
data = data[data["State Client"] != "OH"]
```

```{python}
# Load the OH data
oh = pd.read_csv(here("scripts/njh_data/Helpers Quit Study Data Extract 3.21.25_OH final.csv"), header = 0)
```

```{python}
# Stack data and oh
data = pd.concat([data, oh], ignore_index=True)
```

```{python}
# Load the mapper
# The mapper file has the mapping between the question text/label and the column name
mapper = pd.read_csv(here("scripts/njh_data/mapper.csv"), header = 0)
```

# Total number of participants
```{python}
# Display the total number of rows in the NJH data set
GT(pd.DataFrame.from_dict({'Number of participants': [len(data)]}))
```

# State Client
```{python}
freq_prop(data, 'State Client')
```

# Gender
```{python}
freq_prop(data, 'Gender')
```

# ProtocolType
```{python}
freq_prop(data, 'ProtocolType')
```

# InsuranceCompany
```{python}
freq_prop(data, 'InsuranceCompany')
```

# PrefLanguage
```{python}
freq_prop(data, 'PrefLanguage')
```

# Special Program
```{python}
data["Special Program"] = data["Special Program"].fillna("Traditional")
freq_prop(data, 'Special Program')
```

# Coach Call Count
```{python}
freq_prop(data, 'Coach Call Count')
```

# Received NRT
```{python}
# Nicotine Replacement Therapy
freq_prop(data, 'Received NRT')
```

# Received Bupropion
```{python}
# Missing indicates true. Recode NAs and convert False to No
data["Received Bupropion"] = data["Received Bupropion"].fillna("Yes")
data["Received Bupropion"] = data["Received Bupropion"].replace(False, "No")
freq_prop(data, 'Received Bupropion')
```

# Received Varenicline
```{python}
# Missing indicates true. Recode NAs and convert False to No
data["Received Varenicline"] = data["Received Varenicline"].fillna("Yes")
data["Received Varenicline"] = data["Received Varenicline"].replace(False, "No")
freq_prop(data, 'Received Varenicline')
```

# Age Started Tobacco
```{python}
#| eval: false
# Create a basic histogram to determin the cut points for categorizing Age started tobacco
import matplotlib.pyplot as plt

# Basic histogram
data['Age Started Tobacco'].hist(bins=10)  # You can adjust `bins` for more/less granularity
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Age Distribution')
plt.show()
```

```{python}
summarize(data[data['Age Started Tobacco'] != 0], 'Age Started Tobacco')
```

```{python}
# Convert the numerical age started tobacco to an ordered categorical variable
from pandas.api.types import CategoricalDtype

# Define bins and labels
bins = [0, 15, 25, 40, 100]
labels = ['<15', '15-24', '25-39', '40+']

# Define full list of categories in desired order, including 'Missing'
ordered_labels = labels + ['Missing']
cat_type = CategoricalDtype(categories=ordered_labels, ordered=True)

# Apply cut, convert to object, fillna, then set dtype
age_grouped = pd.cut(
    data['Age Started Tobacco'],
    bins=bins,
    labels=labels,
    right=False
)

# Create the new variable in the data frame
data['Age Started Tobacco Grouped'] = (
    age_grouped.astype(object).fillna('Missing').astype(cat_type)
)
```

```{python}
# Tabulate the categorized Age of starting tobacco
freq_prop(data, 'Age Started Tobacco Grouped')
```

# How may I help you today
```{python}
freq_prop(data, 'SI 1')
```


# How did you hear about the ASHLine?
```{python}
freq_prop(data, 'SI 3')
```

# What types of commercial tobacco products have you used in the past 30 days
<!-- ------------------- CIGARETTES START --------------------------------- -->
## Cigarettes:
```{python}
freq_prop(data, 'SI 5a')
```

#### Do you currently smoke cigarettes every day, some days, or not at all? 
```{python}
freq_prop(data, 'SI 6a')
```

### Cigarettes Per Day
- Branches fro SI 5a
```{python}
#| eval: false
# Better to show this as mean rather than frequency
freq_prop(data, 'Cigarettes Per Day (SI 7a)')
```

```{python}
summarize(data, 'Cigarettes Per Day (SI 7a)')
```

### Are the cigarettes you usually smoke menthol cigarettes?
- Branches from SI 5a
```{python}
freq_prop(data, 'OI 7a-1')
```

### How soon after you wake, do you smoke your first cigarette?
```{python}
freq_prop(data, 'SI 9')
```

### Do you intend to quit using cigarettes within the next 30 days? 
```{python}
freq_prop(data, 'SI 10a')
```
<!-- ------------------- CIGARETTES STOP ---------------------------------- -->




<!-- ---------------------- CIGARS START ---------------------------------- -->
## Cigars, cigarillos, or small cigars:
```{python}
freq_prop(data, 'SI 5b')
```

### Do you currently smoke cigars every day, some days, or not at all?
- Branches from SI 5b
```{python}
freq_prop(data.query("`SI 5b` == 'Yes'"), 'SI 6b')
```

### Cigars Per Week
- Branches from SI 5b
```{python}
freq_prop(data.query("`SI 5b` == 'Yes'"), 'Cigars Per Week (SI 7b)')
```

### Are the cigars you usually smoke menthol cigars?
```{python}
freq_prop(data.query("`SI 5b` == 'Yes'"), 'OI 7b')
```

### How soon after you wake, do you first smoke a cigar, cigarillo, or little cigar?
- Branches from SI 5b
```{python}
freq_prop(data.query("`SI 5b` == 'Yes'"), 'OI 9-1')
```

### Do you intend to quit using cigars, cigarillos, or little cigars within the next 30 days? 
- Branches from SI 5b
```{python}
freq_prop(data.query("`SI 5b` == 'Yes'"), 'SI 10b')
```
<!-- ---------------------- CIGARS STOP ----------------------------------- -->




<!-- ----------------------- PIPE START ----------------------------------- -->
## Pipe:
```{python}
freq_prop(data, 'SI 5c')
```

### Pipes Per Week
```{python}
freq_prop(data.query("`SI 5c` == 'Yes'"), 'Pipes Per Week (SI 7c)')
```
<!-- ----------------------- PIPE STOP ------------------------------------ -->




<!-- ----------------------- CHEWING START -------------------------------- -->
## Chewing tobacco, snuff,  or dip:
```{python}
freq_prop(data, 'SI 5d')
```

### Do you currently use chewing tobacco, snuff or dip every day, some days, or not at all?
- Branches from SI 5d
```{python}
freq_prop(data.query("`SI 5d` == 'Yes'"), 'SI 6d')
```

### Pouch Per Week
- Branches from SI 5d
```{python}
# The name of this column contains an extra space between Week and (SI...)
freq_prop(data.query("`SI 5d` == 'Yes'"), 'Pouch Per Week (SI 7d)')
```

### How soon after you wake, do you first use spit tobacco, snuff or chew?
- Branches from SI 5d
```{python}
freq_prop(data.query("`SI 5d` == 'Yes'"), 'OI 9-3')
```

### Do you intend to quit using chewing tobacco, snuff, or dip within the next 30 days?
- Branches from SI 5d
```{python}
freq_prop(data.query("`SI 5d` == 'Yes'"), 'SI 10d')
```

<!-- ----------------------- CHEWING STOP --------------------------------- -->




<!-- ----------------------- OTHER START ---------------------------------- -->
## Other tobacco products: 
```{python}
freq_prop(data, 'SI 5e')
```

### Bidis:
- Branches from SI-5e
```{python}
freq_prop(data.query("`SI 5e` == 'Yes'"), 'OI 5e-1a')
```

### Kreteks or clove cigarettes:
- Branches from SI-5e
```{python}
freq_prop(data.query("`SI 5e` == 'Yes'"), 'OI 5e-1b')
```

### Tobacco pouches or ‘snus’:
- Branches from SI-5e
```{python}
freq_prop(data.query("`SI 5e` == 'Yes'"), 'OI 5e-1c')
```

### Tobacco ‘orbs’:
- Branches from SI-5e
```{python}
freq_prop(data.query("`SI 5e` == 'Yes'"), 'OI 5e-1d')
``` 

### Tobacco strips: 
- Branches from SI-5e
```{python}
freq_prop(data.query("`SI 5e` == 'Yes'"), 'OI 5e-1e')
``` 

### Water pipes or hookahs:
- Branches from SI-5e
```{python}
freq_prop(data.query("`SI 5e` == 'Yes'"), 'OI 5e-1f')
``` 

### Do you currently use other types of tobacco every day, some days, or not at all?
```{python}
freq_prop(data.query("`SI 5e` == 'Yes'"), 'SI 6e')
```

### How soon after you wake, do you first use other commercial tobacco?
```{python}
freq_prop(data.query("`SI 5e` == 'Yes'"), 'OI 9-4')
```

### Do you intend to quit using [name of other tobacco product] within the next 30 days? 
```{python}
freq_prop(data.query("`SI 5e` == 'Yes'"), 'SI 10e')
```
<!-- ----------------------- OTHER STOP ---------------------------------- -->




# Have you used an e-cigarette or other electronic “vaping” product in the past 30 days?
```{python}
freq_prop(data, 'SI 5F')
```

# Is the vaping product you usually use menthol flavored? 
```{python}
freq_prop(data, 'OI 7f')
```

# How soon after you wake, do you use e-cigarette or other electronic “vaping” products?
```{python}
freq_prop(data, 'OI 9-5')
```

# Do you intend to completely quit using e-cigarettes/e-vaping products within the next 30 days? 
```{python}
freq_prop(data, 'SI 10g')
```









```{python}
# Modify columns SI 6b through SI 6e
# data.loc[:, "SI 6b":"SI 6e"] = data.loc[:, "SI 6b":"SI 6e"].apply(lambda x: x.fillna("Not at all"))
```




# Do you have any mental health conditions, such as an anxiety disorder, depression disorder, bipolar disorder, schizophrenia, Attention-Deficit/Hyperactivity Disorder (ADHD), Posttraumatic Stress Disorder (PTSD) or substance use disorder?
```{python}
freq_prop(data, 'NJ 31')
```

# During the past two weeks have you experienced any emotional challenges such as excessive stress, feeling depressed or anxious?
```{python}
# *** Has a large percentage of missing.
# Is this question only asked of certain states?
freq_prop(data, 'NJ 33')
```

# During the past two weeks have you experienced any emotional challenges that have interfered with your work, family life, or social activities?
```{python}
# *** Has a large percentage of missing.
# Is this question only asked of certain states?
freq_prop(data, 'NJ 34')
```

# Do you consider yourself to be gay, lesbian or bisexual?
```{python}
freq_prop(data, 'OI 24')
```

```{python}
#| eval: false
# When using the freq_prop() function with questions that are branched, input
# a queried or filtered data frame as the main input

data.ProtocolType == "Phone" # Produces an index
data.query("ProtocolType == 'Phone'") # This works to filter

data[data["OI 24"] == "Yes"] # This works to filter col with spaces

# data.`OI 24` == 'Yes' # Does not work to filter or make an index

# This version may work best to filter, because it's a bit more readable
data.query("`OI 24` == 'Yes'") # This works to filter col with spaces

freq_prop(data[data["OI 24"] == "Yes"], 'OI 24b')
```

## Bisexual:
```{python}
# *** Likely a branching question
freq_prop(data, 'OI 24a')
freq_prop(data.query("`OI 24` == 'Yes'"), 'OI 24a')
```

## Gay or lesbian:
```{python}
# *** Likely a branching question
# freq_prop(data, 'OI 24b')
freq_prop(data.query("`OI 24` == 'Yes'"), 'OI 24b')
```

## Queer:
```{python}
# *** Likely a branching question
freq_prop(data, 'OI 24c')
freq_prop(data.query("`OI 24` == 'Yes'"), 'OI 24c')
```











<!-- # ----------------- STANDARD INTAKE (DEMOGRAPHIC) ----------------------------- -->

# What is the highest level of education you have completed?
```{python}
freq_prop(data, 'SI 16')
```

# Are you of Hispanic or Latino/Latina origin?
```{python}
freq_prop(data, 'SI 17')
```

# White
```{python}
freq_prop(data, 'SI 18a')
```

# Black or African American
```{python}
freq_prop(data, 'SI 18b')
```

# Asian
```{python}
freq_prop(data, 'SI 18c')
```

# Native Hawaiian or Pacific Islander
```{python}
freq_prop(data, 'SI 18d')
```

# Are you American Indian or Alaska Native?
```{python}
freq_prop(data, 'SI 18e')
```

# Some other race
```{python}
freq_prop(data, 'SI 18f')
```






# Anxiety Disorder:
```{python}
freq_prop(data, 'UT 3')
```

# Depression:
```{python}
freq_prop(data, 'UT 4')
```

# Schizophrenia and Schizoaffective Disorders:
```{python}
freq_prop(data, 'UT 5')
```

# Bipolar Disorder:
```{python}
freq_prop(data, 'UT 6')
```

# Other:
```{python}
freq_prop(data, 'UT 9')
```
